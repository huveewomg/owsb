package com.owsb.view.supplier;

import com.owsb.controller.SupplierController;
import com.owsb.model.supplier.Supplier;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.List;

/**
 * Panel for supplier management operations
 * Separates supplier management UI from the main dashboard
 */
public class SupplierManagementPanel extends JPanel {
    // UI Components
    private JLabel supplierCodeLabel;
    private JTextField nameField;
    private JTextField contactPersonField;
    private JTextField phoneField;
    private JTable supplierTable;
    private DefaultTableModel tableModel;
    
    // Controller reference
    private final SupplierController supplierController;
    
    /**
     * Constructor
     * @param supplierController Supplier controller
     */
    public SupplierManagementPanel(SupplierController supplierController) {
        this.supplierController = supplierController;
        
        // Set up panel
        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // Create header
        JLabel headerLabel = new JLabel("Supplier Management", JLabel.CENTER);
        headerLabel.setFont(new Font("Arial", Font.BOLD, 18));
        add(headerLabel, BorderLayout.NORTH);
        
        // Create split pane for form and table
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        splitPane.setDividerLocation(400);
        
        // Add form panel to left side
        JPanel formPanel = createFormPanel();
        splitPane.setLeftComponent(formPanel);
        
        // Add table panel to right side
        JPanel tablePanel = createTablePanel();
        splitPane.setRightComponent(tablePanel);
        
        // Add split pane to center
        add(splitPane, BorderLayout.CENTER);
        
        // Initial data load
        refreshSupplierTable();
    }
    
    /**
     * Create form panel with input fields and buttons
     * @return Form panel
     */
    private JPanel createFormPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createEmptyBorder(5, 5, 5, 5),
            BorderFactory.createTitledBorder("Supplier Details")
        ));
        
        // Form fields panel
        JPanel fieldsPanel = new JPanel(new GridLayout(4, 2, 10, 10));
        
        // Supplier code (generated by controller)
        supplierCodeLabel = new JLabel(supplierController.generateNextSupplierId());
        nameField = new JTextField();
        contactPersonField = new JTextField();
        phoneField = new JTextField();
        
        fieldsPanel.add(new JLabel("Supplier Code:"));
        fieldsPanel.add(supplierCodeLabel);
        fieldsPanel.add(new JLabel("Supplier Name:"));
        fieldsPanel.add(nameField);
        fieldsPanel.add(new JLabel("Contact Person:"));
        fieldsPanel.add(contactPersonField);
        fieldsPanel.add(new JLabel("Phone:"));
        fieldsPanel.add(phoneField);
        
        // Button panel
        JPanel buttonPanel = new JPanel();
        JButton addButton = new JButton("Add Supplier");
        JButton updateButton = new JButton("Update Supplier");
        JButton deleteButton = new JButton("Delete Supplier");
        JButton clearButton = new JButton("Clear Form");
        
        // Add Supplier action
        addButton.addActionListener((ActionEvent e) -> {
            String name = nameField.getText().trim();
            String contactPerson = contactPersonField.getText().trim();
            String phone = phoneField.getText().trim();
            
            // Basic validation
            if (name.isEmpty() || contactPerson.isEmpty() || phone.isEmpty()) {
                JOptionPane.showMessageDialog(panel, "Please fill in all fields.");
                return;
            }
            
            // Use controller to add supplier
            boolean success = supplierController.addSupplier(name, contactPerson, phone);
            
            if (success) {
                JOptionPane.showMessageDialog(panel, "Supplier added successfully.");
                clearForm();
                supplierCodeLabel.setText(supplierController.generateNextSupplierId());
                refreshSupplierTable();
            } else {
                JOptionPane.showMessageDialog(panel, "Failed to add supplier.", 
                                            "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        // Update Supplier action
        updateButton.addActionListener((ActionEvent e) -> {
            int selectedRow = supplierTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(panel, "Please select a supplier to update.");
                return;
            }
            
            String supplierId = (String) tableModel.getValueAt(selectedRow, 0);
            String name = nameField.getText().trim();
            String contactPerson = contactPersonField.getText().trim();
            String phone = phoneField.getText().trim();
            
            // Use controller to update supplier
            boolean success = supplierController.updateSupplier(supplierId, name, contactPerson, phone);
            
            if (success) {
                JOptionPane.showMessageDialog(panel, "Supplier updated successfully.");
                clearForm();
                refreshSupplierTable();
            } else {
                JOptionPane.showMessageDialog(panel, "Failed to update supplier.", 
                                            "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        // Delete Supplier action
        deleteButton.addActionListener((ActionEvent e) -> {
            int selectedRow = supplierTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(panel, "Please select a supplier to delete.");
                return;
            }
            
            String supplierId = (String) tableModel.getValueAt(selectedRow, 0);
            
            int confirm = JOptionPane.showConfirmDialog(panel, 
                "Are you sure you want to delete this supplier?", 
                "Confirm Deletion", JOptionPane.YES_NO_OPTION);
                
            if (confirm == JOptionPane.YES_OPTION) {
                boolean success = supplierController.deleteSupplier(supplierId);
                
                if (success) {
                    JOptionPane.showMessageDialog(panel, "Supplier deleted successfully.");
                    clearForm();
                    refreshSupplierTable();
                } else {
                    JOptionPane.showMessageDialog(panel, "Failed to delete supplier.", 
                                                "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        
        // Clear form action
        clearButton.addActionListener(e -> clearForm());
        
        // Add buttons to panel
        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(clearButton);
        
        // Combine components
        panel.add(fieldsPanel, BorderLayout.CENTER);
        panel.add(buttonPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    /**
     * Create table panel with supplier list
     * @return Table panel
     */
    private JPanel createTablePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createEmptyBorder(5, 5, 5, 5),
            BorderFactory.createTitledBorder("Supplier List")
        ));
        
        // Table model with non-editable cells
        tableModel = new DefaultTableModel(
            new String[]{"Supplier Code", "Name", "Contact Person", "Phone"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        // Create table
        supplierTable = new JTable(tableModel);
        supplierTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        supplierTable.setFillsViewportHeight(true);
        
        // Add selection listener
        supplierTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = supplierTable.getSelectedRow();
                if (selectedRow != -1) {
                    String supplierId = (String) tableModel.getValueAt(selectedRow, 0);
                    Supplier supplier = supplierController.getSupplierById(supplierId);
                    
                    if (supplier != null) {
                        nameField.setText(supplier.getName());
                        contactPersonField.setText(supplier.getContactPerson());
                        phoneField.setText(supplier.getPhone());
                    }
                }
            }
        });
        
        // Add to scroll pane
        JScrollPane scrollPane = new JScrollPane(supplierTable);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        // Add refresh button
        JButton refreshButton = new JButton("Refresh");
        refreshButton.addActionListener(e -> refreshSupplierTable());
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.add(refreshButton);
        panel.add(buttonPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    /**
     * Clear form fields
     */
    private void clearForm() {
        nameField.setText("");
        contactPersonField.setText("");
        phoneField.setText("");
        supplierTable.clearSelection();
    }
    
    /**
     * Refresh supplier table with latest data
     */
    private void refreshSupplierTable() {
        tableModel.setRowCount(0);
        
        List<Supplier> suppliers = supplierController.getAllSuppliers();
        
        for (Supplier supplier : suppliers) {
            tableModel.addRow(new Object[]{
                supplier.getSupplierID(),
                supplier.getName(),
                supplier.getContactPerson(),
                supplier.getPhone()
            });
        }
    }
}