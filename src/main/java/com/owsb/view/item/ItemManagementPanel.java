package com.owsb.view.item;

import com.owsb.controller.ItemController;
import com.owsb.model.inventory.Item;
import com.owsb.util.SupplierUtils;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.List;
import java.util.Map;

/**
 * Panel for item management operations
 * Separates item management UI from the main dashboard
 */
public class ItemManagementPanel extends JPanel {
    // UI Components
    private JLabel itemCodeLabel;
    private JTextField nameField;
    private JTextField descriptionField;
    private JTextField priceField;
    private JComboBox<String> categoryCombo;
    private JComboBox<String> supplierCombo;
    private JTable itemTable;
    private DefaultTableModel tableModel;
    
    // Controller reference
    private final ItemController itemController;
    
    /**
     * Constructor
     * @param itemController Item controller
     */
    public ItemManagementPanel(ItemController itemController) {
        this.itemController = itemController;
        
        // Set up panel
        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // Create header
        JLabel headerLabel = new JLabel("Item Management", JLabel.CENTER);
        headerLabel.setFont(new Font("Arial", Font.BOLD, 18));
        add(headerLabel, BorderLayout.NORTH);
        
        // Create split pane for form and table
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        splitPane.setDividerLocation(400);
        
        // Add form panel to left side
        JPanel formPanel = createFormPanel();
        splitPane.setLeftComponent(formPanel);
        
        // Add table panel to right side
        JPanel tablePanel = createTablePanel();
        splitPane.setRightComponent(tablePanel);
        
        // Add split pane to center
        add(splitPane, BorderLayout.CENTER);
        
        // Initial data load
        refreshItemTable();
    }
    
    /**
     * Create form panel with input fields and buttons
     * @return Form panel
     */
    private JPanel createFormPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createEmptyBorder(5, 5, 5, 5),
            BorderFactory.createTitledBorder("Item Details")
        ));
        
        // Form fields panel
        JPanel fieldsPanel = new JPanel(new GridLayout(6, 2, 10, 10));
        
        // Item code (generated by controller)
        itemCodeLabel = new JLabel(itemController.generateNextItemId());
        nameField = new JTextField();
        descriptionField = new JTextField();
        priceField = new JTextField();
        categoryCombo = new JComboBox<>(new String[]{"Groceries", "Fresh Produce", "Essentials"}); //HACK: Hardcoded categories
        supplierCombo = new JComboBox<>();
        
        // Populate supplier combo box
        SupplierUtils.populateSupplierComboBox(supplierCombo);
        
        fieldsPanel.add(new JLabel("Item Code:"));
        fieldsPanel.add(itemCodeLabel);
        fieldsPanel.add(new JLabel("Item Name:"));
        fieldsPanel.add(nameField);
        fieldsPanel.add(new JLabel("Description:"));
        fieldsPanel.add(descriptionField);
        fieldsPanel.add(new JLabel("Unit Price:"));
        fieldsPanel.add(priceField);
        fieldsPanel.add(new JLabel("Category:"));
        fieldsPanel.add(categoryCombo);
        fieldsPanel.add(new JLabel("Supplier:"));
        fieldsPanel.add(supplierCombo);
        
        // Button panel
        JPanel buttonPanel = new JPanel();
        JButton addButton = new JButton("Add Item");
        JButton updateButton = new JButton("Update Item");
        JButton deleteButton = new JButton("Delete Item");
        JButton clearButton = new JButton("Clear Form");
        
        // Add Item action
        addButton.addActionListener((ActionEvent e) -> {
            try {
                String name = nameField.getText().trim();
                String description = descriptionField.getText().trim();
                double price = Double.parseDouble(priceField.getText().trim());
                String category = (String) categoryCombo.getSelectedItem();
                String supplierId = SupplierUtils.getSelectedSupplierId(supplierCombo);
                
                // Basic validation
                if (name.isEmpty() || description.isEmpty() || supplierId == null) {
                    JOptionPane.showMessageDialog(panel, "Please fill in all fields.");
                    return;
                }
                
                // Use controller to add item
                boolean success = itemController.addItem(name, description, price, category, supplierId);
                
                if (success) {
                    JOptionPane.showMessageDialog(panel, "Item added successfully.");
                    clearForm();
                    itemCodeLabel.setText(itemController.generateNextItemId());
                    refreshItemTable();
                } else {
                    JOptionPane.showMessageDialog(panel, "Failed to add item.", 
                                                "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(panel, "Please enter a valid price.", 
                                            "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        // Update Item action
        updateButton.addActionListener((ActionEvent e) -> {
            int selectedRow = itemTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(panel, "Please select an item to update.");
                return;
            }
            
            String itemId = (String) tableModel.getValueAt(selectedRow, 0);
            try {
                String name = nameField.getText().trim();
                String description = descriptionField.getText().trim();
                double price = Double.parseDouble(priceField.getText().trim());
                String category = (String) categoryCombo.getSelectedItem();
                
                // Use controller to update item
                boolean success = itemController.updateItem(itemId, name, description, price, category);
                
                if (success) {
                    JOptionPane.showMessageDialog(panel, "Item updated successfully.");
                    clearForm();
                    refreshItemTable();
                } else {
                    JOptionPane.showMessageDialog(panel, "Failed to update item.", 
                                                "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(panel, "Please enter a valid price.", 
                                            "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        // Delete Item action
        deleteButton.addActionListener((ActionEvent e) -> {
            int selectedRow = itemTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(panel, "Please select an item to delete.");
                return;
            }
            
            String itemId = (String) tableModel.getValueAt(selectedRow, 0);
            
            // Confirm deletion
            int confirm = JOptionPane.showConfirmDialog(panel, 
                "Are you sure you want to delete this item?", 
                "Confirm Deletion", JOptionPane.YES_NO_OPTION);
                
            if (confirm == JOptionPane.YES_OPTION) {
                boolean success = itemController.deleteItem(itemId);
                
                if (success) {
                    JOptionPane.showMessageDialog(panel, "Item deleted successfully.");
                    clearForm();
                    refreshItemTable();
                } else {
                    JOptionPane.showMessageDialog(panel, "Failed to delete item.", 
                                                "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        
        // Clear form action
        clearButton.addActionListener(e -> clearForm());
        
        // Add buttons to panel
        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(clearButton);
        
        // Combine components
        panel.add(fieldsPanel, BorderLayout.CENTER);
        panel.add(buttonPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    /**
     * Create table panel with item list
     * @return Table panel
     */
    private JPanel createTablePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createEmptyBorder(5, 5, 5, 5),
            BorderFactory.createTitledBorder("Item List")
        ));
        
        // Table model with non-editable cells
        tableModel = new DefaultTableModel(
            new String[]{"Item Code", "Name", "Description", "Price", "Category", "Supplier"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        // Create table
        itemTable = new JTable(tableModel);
        itemTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        itemTable.setFillsViewportHeight(true);
        
        // Add selection listener
        itemTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = itemTable.getSelectedRow();
                if (selectedRow != -1) {
                    String itemId = (String) tableModel.getValueAt(selectedRow, 0);
                    Item item = itemController.getItemById(itemId);
                    
                    if (item != null) {
                        nameField.setText(item.getName());
                        descriptionField.setText(item.getDescription());
                        priceField.setText(String.valueOf(item.getUnitPrice()));
                        categoryCombo.setSelectedItem(item.getCategory());
                        
                        // Set supplier in combo box
                        String supplierName = SupplierUtils.getSupplierIdToNameMap().get(item.getSupplierID());
                        if (supplierName != null) {
                            supplierCombo.setSelectedItem(supplierName);
                        }
                    }
                }
            }
        });
        
        // Add to scroll pane
        JScrollPane scrollPane = new JScrollPane(itemTable);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        // Add refresh button
        JButton refreshButton = new JButton("Refresh");
        refreshButton.addActionListener(e -> refreshItemTable());
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.add(refreshButton);
        panel.add(buttonPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    /**
     * Clear form fields
     */
    private void clearForm() {
        nameField.setText("");
        descriptionField.setText("");
        priceField.setText("");
        itemTable.clearSelection();
    }
    
    /**
     * Refresh item table with latest data
     */
    private void refreshItemTable() {
        tableModel.setRowCount(0);
        
        List<Item> items = itemController.getAllItems();
        Map<String, String> supplierMap = SupplierUtils.getSupplierIdToNameMap();
        
        for (Item item : items) {
            String supplierName = supplierMap.getOrDefault(item.getSupplierID(), "Unknown");
            
            tableModel.addRow(new Object[]{
                item.getItemID(),
                item.getName(),
                item.getDescription(),
                item.getUnitPrice(),
                item.getCategory(),
                supplierName
            });
        }
    }
}